{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nfunction DoctorFormComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DoctorFormComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Valid email is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DoctorFormComponent_option_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const spec_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", spec_r1);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(spec_r1);\n  }\n}\nfunction DoctorFormComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Specialty is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let DoctorFormComponent = /*#__PURE__*/(() => {\n  class DoctorFormComponent {\n    constructor(fb, router, route) {\n      this.fb = fb;\n      this.router = router;\n      this.route = route;\n      this.isEditMode = false;\n      this.doctorId = null;\n      this.specialties = ['Cardiology', 'Dermatology', 'Neurology', 'Pediatrics', 'General'];\n      this.doctorForm = this.fb.group({\n        name: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]],\n        specialty: ['', Validators.required]\n      });\n    }\n    ngOnInit() {\n      this.route.paramMap.subscribe(params => {\n        const id = params.get('id');\n        if (id) {\n          this.isEditMode = true;\n          this.doctorId = +id;\n          // Load doctor data from API or service here\n          // For now, populate with dummy data\n          this.doctorForm.patchValue({\n            name: 'Dr. Sample',\n            email: 'doctor@example.com',\n            specialty: 'Cardiology'\n          });\n        }\n      });\n    }\n    onSubmit() {\n      if (this.doctorForm.invalid) {\n        return;\n      }\n      const doctorData = this.doctorForm.value;\n      if (this.isEditMode) {\n        // Update doctor API call\n        alert('Doctor updated: ' + JSON.stringify(doctorData));\n      } else {\n        // Create doctor API call\n        alert('Doctor created: ' + JSON.stringify(doctorData));\n      }\n      this.router.navigate(['/doctors']);\n    }\n    onCancel() {\n      this.router.navigate(['/doctors']);\n    }\n    static {\n      this.ɵfac = function DoctorFormComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || DoctorFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: DoctorFormComponent,\n        selectors: [[\"app-doctor-form\"]],\n        decls: 27,\n        vars: 8,\n        consts: [[1, \"max-w-md\", \"mx-auto\", \"bg-white\", \"p-6\", \"rounded-lg\", \"shadow-md\"], [1, \"text-2xl\", \"font-semibold\", \"text-gray-700\", \"mb-4\"], [1, \"space-y-4\", 3, \"ngSubmit\", \"formGroup\"], [\"for\", \"name\", 1, \"block\", \"text-gray-700\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"Enter full name\", 1, \"w-full\", \"px-3\", \"py-2\", \"border\", \"border-gray-300\", \"rounded\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-indigo-500\"], [\"class\", \"text-red-600 text-sm mt-1\", 4, \"ngIf\"], [\"for\", \"email\", 1, \"block\", \"text-gray-700\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Enter email address\", 1, \"w-full\", \"px-3\", \"py-2\", \"border\", \"border-gray-300\", \"rounded\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-indigo-500\"], [\"for\", \"specialty\", 1, \"block\", \"text-gray-700\"], [\"id\", \"specialty\", \"formControlName\", \"specialty\", 1, \"w-full\", \"px-3\", \"py-2\", \"border\", \"border-gray-300\", \"rounded\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-indigo-500\"], [\"value\", \"\", \"disabled\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"flex\", \"space-x-4\"], [\"type\", \"submit\", 1, \"bg-indigo-600\", \"text-white\", \"px-4\", \"py-2\", \"rounded\", \"hover:bg-indigo-700\", 3, \"disabled\"], [\"type\", \"button\", 1, \"bg-gray-300\", \"text-gray-700\", \"px-4\", \"py-2\", \"rounded\", \"hover:bg-gray-400\", 3, \"click\"], [1, \"text-red-600\", \"text-sm\", \"mt-1\"], [3, \"value\"]],\n        template: function DoctorFormComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n            i0.ɵɵtext(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"form\", 2);\n            i0.ɵɵlistener(\"ngSubmit\", function DoctorFormComponent_Template_form_ngSubmit_3_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(4, \"div\")(5, \"label\", 3);\n            i0.ɵɵtext(6, \"Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(7, \"input\", 4);\n            i0.ɵɵtemplate(8, DoctorFormComponent_div_8_Template, 2, 0, \"div\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"div\")(10, \"label\", 6);\n            i0.ɵɵtext(11, \"Email\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(12, \"input\", 7);\n            i0.ɵɵtemplate(13, DoctorFormComponent_div_13_Template, 2, 0, \"div\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(14, \"div\")(15, \"label\", 8);\n            i0.ɵɵtext(16, \"Specialty\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(17, \"select\", 9)(18, \"option\", 10);\n            i0.ɵɵtext(19, \"Select specialty\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(20, DoctorFormComponent_option_20_Template, 2, 2, \"option\", 11);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(21, DoctorFormComponent_div_21_Template, 2, 0, \"div\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(22, \"div\", 12)(23, \"button\", 13);\n            i0.ɵɵtext(24);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(25, \"button\", 14);\n            i0.ɵɵlistener(\"click\", function DoctorFormComponent_Template_button_click_25_listener() {\n              return ctx.onCancel();\n            });\n            i0.ɵɵtext(26, \" Cancel \");\n            i0.ɵɵelementEnd()()()();\n          }\n          if (rf & 2) {\n            let tmp_2_0;\n            let tmp_3_0;\n            let tmp_5_0;\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Edit Doctor\" : \"Add Doctor\", \" \");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"formGroup\", ctx.doctorForm);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.doctorForm.get(\"name\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.doctorForm.get(\"name\")) == null ? null : tmp_2_0.touched));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.doctorForm.get(\"email\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.doctorForm.get(\"email\")) == null ? null : tmp_3_0.touched));\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngForOf\", ctx.specialties);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx.doctorForm.get(\"specialty\")) == null ? null : tmp_5_0.invalid) && ((tmp_5_0 = ctx.doctorForm.get(\"specialty\")) == null ? null : tmp_5_0.touched));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", ctx.doctorForm.invalid);\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Update\" : \"Add\", \" \");\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return DoctorFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}